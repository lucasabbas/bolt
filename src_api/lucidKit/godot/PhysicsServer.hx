package lucidKit.godot;

@:native("godot.PhysicsServer")
extern class PhysicsServer extends Object {
    public function area_add_shape(area: RID, shape: RID, transform: Transform, disabled: Bool): Void;
    public function area_attach_object_instance_id(area: RID, id: Int): Void;
    public function area_clear_shapes(area: RID): Void;
    public function area_create(): RID;
    public function area_get_object_instance_id(area: RID): Int;
    public function area_get_param(area: RID, param: Int): Variant;
    public function area_get_shape(area: RID, shape_idx: Int): RID;
    public function area_get_shape_count(area: RID): Int;
    public function area_get_shape_transform(area: RID, shape_idx: Int): Transform;
    public function area_get_space(area: RID): RID;
    public function area_get_space_override_mode(area: RID): Int;
    public function area_get_transform(area: RID): Transform;
    public function area_is_ray_pickable(area: RID): Bool;
    public function area_remove_shape(area: RID, shape_idx: Int): Void;
    public function area_set_area_monitor_callback(area: RID, receiver: Object, method: String): Void;
    public function area_set_collision_layer(area: RID, layer: Int): Void;
    public function area_set_collision_mask(area: RID, mask: Int): Void;
    public function area_set_monitor_callback(area: RID, receiver: Object, method: String): Void;
    public function area_set_monitorable(area: RID, monitorable: Bool): Void;
    public function area_set_param(area: RID, param: Int, value: Variant): Void;
    public function area_set_ray_pickable(area: RID, enable: Bool): Void;
    public function area_set_shape(area: RID, shape_idx: Int, shape: RID): Void;
    public function area_set_shape_disabled(area: RID, shape_idx: Int, disabled: Bool): Void;
    public function area_set_shape_transform(area: RID, shape_idx: Int, transform: Transform): Void;
    public function area_set_space(area: RID, space: RID): Void;
    public function area_set_space_override_mode(area: RID, mode: Int): Void;
    public function area_set_transform(area: RID, transform: Transform): Void;
    public function body_add_central_force(body: RID, force: GdVector3): Void;
    public function body_add_collision_exception(body: RID, excepted_body: RID): Void;
    public function body_add_force(body: RID, force: GdVector3, position: GdVector3): Void;
    public function body_add_shape(body: RID, shape: RID, transform: Transform, disabled: Bool): Void;
    public function body_add_torque(body: RID, torque: GdVector3): Void;
    public function body_apply_central_impulse(body: RID, impulse: GdVector3): Void;
    public function body_apply_impulse(body: RID, position: GdVector3, impulse: GdVector3): Void;
    public function body_apply_torque_impulse(body: RID, impulse: GdVector3): Void;
    public function body_attach_object_instance_id(body: RID, id: Int): Void;
    public function body_clear_shapes(body: RID): Void;
    public function body_create(mode: Int, init_sleeping: Bool): RID;
    public function body_get_collision_layer(body: RID): Int;
    public function body_get_collision_mask(body: RID): Int;
    public function body_get_direct_state(body: RID): PhysicsDirectBodyState;
    public function body_get_kinematic_safe_margin(body: RID): Float;
    public function body_get_max_contacts_reported(body: RID): Int;
    public function body_get_mode(body: RID): Int;
    public function body_get_object_instance_id(body: RID): Int;
    public function body_get_param(body: RID, param: Int): Float;
    public function body_get_shape(body: RID, shape_idx: Int): RID;
    public function body_get_shape_count(body: RID): Int;
    public function body_get_shape_transform(body: RID, shape_idx: Int): Transform;
    public function body_get_space(body: RID): RID;
    public function body_get_state(body: RID, state: Int): Variant;
    public function body_is_axis_locked(body: RID, axis: Int): Bool;
    public function body_is_continuous_collision_detection_enabled(body: RID): Bool;
    public function body_is_omitting_force_integration(body: RID): Bool;
    public function body_is_ray_pickable(body: RID): Bool;
    public function body_remove_collision_exception(body: RID, excepted_body: RID): Void;
    public function body_remove_shape(body: RID, shape_idx: Int): Void;
    public function body_set_axis_lock(body: RID, axis: Int, lock: Bool): Void;
    public function body_set_axis_velocity(body: RID, axis_velocity: GdVector3): Void;
    public function body_set_collision_layer(body: RID, layer: Int): Void;
    public function body_set_collision_mask(body: RID, mask: Int): Void;
    public function body_set_enable_continuous_collision_detection(body: RID, enable: Bool): Void;
    public function body_set_force_integration_callback(body: RID, receiver: Object, method: String, userdata: Variant): Void;
    public function body_set_kinematic_safe_margin(body: RID, margin: Float): Void;
    public function body_set_max_contacts_reported(body: RID, amount: Int): Void;
    public function body_set_mode(body: RID, mode: Int): Void;
    public function body_set_omit_force_integration(body: RID, enable: Bool): Void;
    public function body_set_param(body: RID, param: Int, value: Float): Void;
    public function body_set_ray_pickable(body: RID, enable: Bool): Void;
    public function body_set_shape(body: RID, shape_idx: Int, shape: RID): Void;
    public function body_set_shape_disabled(body: RID, shape_idx: Int, disabled: Bool): Void;
    public function body_set_shape_transform(body: RID, shape_idx: Int, transform: Transform): Void;
    public function body_set_space(body: RID, space: RID): Void;
    public function body_set_state(body: RID, state: Int, value: Variant): Void;
    public function body_test_motion(body: RID, from: Transform, motion: GdVector3, infinite_inertia: Bool, result: PhysicsTestMotionResult, exclude_raycast_shapes: Bool, exclude: Array<Dynamic>): Bool;
    public function cone_twist_joint_get_param(joint: RID, param: Int): Float;
    public function cone_twist_joint_set_param(joint: RID, param: Int, value: Float): Void;
    public function free_rid(rid: RID): Void;
    public function generic_6dof_joint_get_flag(joint: RID, axis: Int, flag: Int): Bool;
    public function generic_6dof_joint_get_param(joint: RID, axis: Int, param: Int): Float;
    public function generic_6dof_joint_set_flag(joint: RID, axis: Int, flag: Int, enable: Bool): Void;
    public function generic_6dof_joint_set_param(joint: RID, axis: Int, param: Int, value: Float): Void;
    public function get_process_info(process_info: Int): Int;
    public function hinge_joint_get_flag(joint: RID, flag: Int): Bool;
    public function hinge_joint_get_param(joint: RID, param: Int): Float;
    public function hinge_joint_set_flag(joint: RID, flag: Int, enabled: Bool): Void;
    public function hinge_joint_set_param(joint: RID, param: Int, value: Float): Void;
    public function joint_create_cone_twist(body_A: RID, local_ref_A: Transform, body_B: RID, local_ref_B: Transform): RID;
    public function joint_create_generic_6dof(body_A: RID, local_ref_A: Transform, body_B: RID, local_ref_B: Transform): RID;
    public function joint_create_hinge(body_A: RID, hinge_A: Transform, body_B: RID, hinge_B: Transform): RID;
    public function joint_create_pin(body_A: RID, local_A: GdVector3, body_B: RID, local_B: GdVector3): RID;
    public function joint_create_slider(body_A: RID, local_ref_A: Transform, body_B: RID, local_ref_B: Transform): RID;
    public function joint_get_solver_priority(joint: RID): Int;
    public function joint_get_type(joint: RID): Int;
    public function joint_set_solver_priority(joint: RID, priority: Int): Void;
    public function pin_joint_get_local_a(joint: RID): Vector3;
    public function pin_joint_get_local_b(joint: RID): Vector3;
    public function pin_joint_get_param(joint: RID, param: Int): Float;
    public function pin_joint_set_local_a(joint: RID, local_A: GdVector3): Void;
    public function pin_joint_set_local_b(joint: RID, local_B: GdVector3): Void;
    public function pin_joint_set_param(joint: RID, param: Int, value: Float): Void;
    public function set_active(active: Bool): Void;
    public function set_collision_iterations(iterations: Int): Void;
    public function shape_create(type: Int): RID;
    public function shape_get_data(shape: RID): Variant;
    public function shape_get_type(shape: RID): Int;
    public function shape_set_data(shape: RID, data: Variant): Void;
    public function slider_joint_get_param(joint: RID, param: Int): Float;
    public function slider_joint_set_param(joint: RID, param: Int, value: Float): Void;
    public function space_create(): RID;
    public function space_get_direct_state(space: RID): PhysicsDirectSpaceState;
    public function space_get_param(space: RID, param: Int): Float;
    public function space_is_active(space: RID): Bool;
    public function space_set_active(space: RID, active: Bool): Void;
    public function space_set_param(space: RID, param: Int, value: Float): Void;
    @:native("__new")
    public function new();
}
