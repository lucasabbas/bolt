package lucidkit.godot;

@:native("godot.Node")
extern class Node extends Object {
    public var custom_multiplayer: MultiplayerAPI;
    public var filename: String;
    public var multiplayer: MultiplayerAPI;
    public var name: String;
    public var owner: Node;
    public var pause_mode: Int;
    public var physics_interpolation_mode: Int;
    public var process_priority: Int;
    public var unique_name_in_owner: Bool;
    public function _enter_tree(): Void;
    public function _exit_tree(): Void;
    public function _get_configuration_warning(): String;
    public function _input(event: InputEvent): Void;
    public function _physics_process(delta: Float): Void;
    public function _process(delta: Float): Void;
    public function _ready(): Void;
    public function _unhandled_input(event: InputEvent): Void;
    public function _unhandled_key_input(event: InputEventKey): Void;
    public function add_child(node: Node, force_readable_name: Bool): Void;
    public function add_child_below_node(node: Node, child_node: Node, force_readable_name: Bool): Void;
    public function add_to_group(group: String, persistent: Bool): Void;
    public function can_process(): Bool;
    public function create_tween(): SceneTreeTween;
    public function duplicate(flags: Int): Node;
    public function find_node(mask: String, recursive: Bool, owned: Bool): Node;
    public function find_parent(mask: String): Node;
    public function get_child(idx: Int): Node;
    public function get_child_count(): Int;
    public function get_children(): Array<Dynamic>;
    public function get_groups(): Array<Dynamic>;
    public function get_index(): Int;
    public function get_network_master(): Int;
    public function get_node(path: NodePath): Node;
    public function get_node_and_resource(path: NodePath): Array<Dynamic>;
    public function get_node_or_null(path: NodePath): Node;
    public function get_parent(): Node;
    public function get_path(): NodePath;
    public function get_path_to(node: Node): NodePath;
    public function get_physics_process_delta_time(): Float;
    public function get_position_in_parent(): Int;
    public function get_process_delta_time(): Float;
    public function get_scene_instance_load_placeholder(): Bool;
    public function get_tree(): SceneTree;
    public function get_viewport(): Viewport;
    public function has_node(path: NodePath): Bool;
    public function has_node_and_resource(path: NodePath): Bool;
    public function is_a_parent_of(node: Node): Bool;
    public function is_displayed_folded(): Bool;
    public function is_editable_instance(node: Node): Bool;
    public function is_greater_than(node: Node): Bool;
    public function is_in_group(group: String): Bool;
    public function is_inside_tree(): Bool;
    public function is_network_master(): Bool;
    public function is_node_ready(): Bool;
    public function is_physics_interpolated(): Bool;
    public function is_physics_interpolated_and_enabled(): Bool;
    public function is_physics_processing(): Bool;
    public function is_physics_processing_internal(): Bool;
    public function is_processing(): Bool;
    public function is_processing_input(): Bool;
    public function is_processing_internal(): Bool;
    public function is_processing_unhandled_input(): Bool;
    public function is_processing_unhandled_key_input(): Bool;
    public function move_child(child_node: Node, to_position: Int): Void;
    public function print_stray_nodes(): Void;
    public function print_tree(): Void;
    public function print_tree_pretty(): Void;
    public function propagate_call(method: String, args: Array<Dynamic>, parent_first: Bool): Void;
    public function propagate_notification(what: Int): Void;
    public function queue_free(): Void;
    public function raise(): Void;
    public function remove_and_skip(): Void;
    public function remove_child(node: Node): Void;
    public function remove_from_group(group: String): Void;
    public function replace_by(node: Node, keep_data: Bool): Void;
    public function request_ready(): Void;
    public function reset_physics_interpolation(): Void;
    public function rpc(method: String): Variant;
    public function rpc_config(method: String, mode: Int): Void;
    public function rpc_id(peer_id: Int, method: String): Variant;
    public function rpc_unreliable(method: String): Variant;
    public function rpc_unreliable_id(peer_id: Int, method: String): Variant;
    public function rset(property: String, value: Variant): Void;
    public function rset_config(property: String, mode: Int): Void;
    public function rset_id(peer_id: Int, property: String, value: Variant): Void;
    public function rset_unreliable(property: String, value: Variant): Void;
    public function rset_unreliable_id(peer_id: Int, property: String, value: Variant): Void;
    public function set_display_folded(fold: Bool): Void;
    public function set_editable_instance(node: Node, is_editable: Bool): Void;
    public function set_network_master(id: Int, recursive: Bool): Void;
    public function set_physics_process(enable: Bool): Void;
    public function set_physics_process_internal(enable: Bool): Void;
    public function set_process(enable: Bool): Void;
    public function set_process_input(enable: Bool): Void;
    public function set_process_internal(enable: Bool): Void;
    public function set_process_unhandled_input(enable: Bool): Void;
    public function set_process_unhandled_key_input(enable: Bool): Void;
    public function set_scene_instance_load_placeholder(load_placeholder: Bool): Void;
    public function update_configuration_warning(): Void;
}
