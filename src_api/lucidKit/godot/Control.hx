package lucidKit.godot;

@:native("godot.Control")
extern class Control extends CanvasItem {
    public var anchor_bottom: Float;
    public var anchor_left: Float;
    public var anchor_right: Float;
    public var anchor_top: Float;
    public var focus_mode: Int;
    public var focus_neighbour_bottom: NodePath;
    public var focus_neighbour_left: NodePath;
    public var focus_neighbour_right: NodePath;
    public var focus_neighbour_top: NodePath;
    public var focus_next: NodePath;
    public var focus_previous: NodePath;
    public var grow_horizontal: Int;
    public var grow_vertical: Int;
    public var hint_tooltip: String;
    public var input_pass_on_modal_close_click: Bool;
    public var margin_bottom: Float;
    public var margin_left: Float;
    public var margin_right: Float;
    public var margin_top: Float;
    public var mouse_default_cursor_shape: Int;
    public var mouse_filter: Int;
    public var physics_interpolation_mode: Int;
    public var rect_clip_content: Bool;
    public var rect_global_position: Vector2;
    public var rect_min_size: Vector2;
    public var rect_pivot_offset: Vector2;
    public var rect_position: Vector2;
    public var rect_rotation: Float;
    public var rect_scale: Vector2;
    public var rect_size: Vector2;
    public var size_flags_horizontal: Int;
    public var size_flags_stretch_ratio: Float;
    public var size_flags_vertical: Int;
    public var theme: Theme;
    public var theme_type_variation: String;
    public function _clips_input(): Bool;
    public function _get_minimum_size(): Vector2;
    public function _gui_input(event: InputEvent): Void;
    public function _make_custom_tooltip(for_text: String): Control;
    public function accept_event(): Void;
    public function add_color_override(name: String, color: Color): Void;
    public function add_constant_override(name: String, constant: Int): Void;
    public function add_font_override(name: String, font: Font): Void;
    public function add_icon_override(name: String, texture: Texture): Void;
    public function add_shader_override(name: String, shader: Shader): Void;
    public function add_stylebox_override(name: String, stylebox: StyleBox): Void;
    public function can_drop_data(position: GdVector2, data: Variant): Bool;
    public function drop_data(position: GdVector2, data: Variant): Void;
    public function find_next_valid_focus(): Control;
    public function find_prev_valid_focus(): Control;
    public function force_drag(data: Variant, preview: Control): Void;
    public function get_anchor(margin: Int): Float;
    public function get_begin(): Vector2;
    public function get_color(name: String, theme_type: String): Color;
    public function get_combined_minimum_size(): Vector2;
    public function get_constant(name: String, theme_type: String): Int;
    public function get_cursor_shape(position: GdVector2): Int;
    public function get_drag_data(position: GdVector2): Variant;
    public function get_end(): Vector2;
    public function get_focus_neighbour(margin: Int): NodePath;
    public function get_focus_owner(): Control;
    public function get_font(name: String, theme_type: String): Font;
    public function get_global_rect(): Rect2;
    public function get_icon(name: String, theme_type: String): Texture;
    public function get_margin(margin: Int): Float;
    public function get_minimum_size(): Vector2;
    public function get_parent_area_size(): Vector2;
    public function get_parent_control(): Control;
    public function get_rect(): Rect2;
    public function get_rotation(): Float;
    public function get_stylebox(name: String, theme_type: String): StyleBox;
    public function get_theme_default_font(): Font;
    public function get_tooltip(at_position: GdVector2): String;
    public function grab_click_focus(): Void;
    public function grab_focus(): Void;
    public function has_color(name: String, theme_type: String): Bool;
    public function has_color_override(name: String): Bool;
    public function has_constant(name: String, theme_type: String): Bool;
    public function has_constant_override(name: String): Bool;
    public function has_focus(): Bool;
    public function has_font(name: String, theme_type: String): Bool;
    public function has_font_override(name: String): Bool;
    public function has_icon(name: String, theme_type: String): Bool;
    public function has_icon_override(name: String): Bool;
    public function has_point(point: GdVector2): Bool;
    public function has_shader_override(name: String): Bool;
    public function has_stylebox(name: String, theme_type: String): Bool;
    public function has_stylebox_override(name: String): Bool;
    public function is_drag_successful(): Bool;
    public function minimum_size_changed(): Void;
    public function release_focus(): Void;
    public function remove_color_override(name: String): Void;
    public function remove_constant_override(name: String): Void;
    public function remove_font_override(name: String): Void;
    public function remove_icon_override(name: String): Void;
    public function remove_shader_override(name: String): Void;
    public function remove_stylebox_override(name: String): Void;
    public function set_anchor(margin: Int, anchor: Float, keep_margin: Bool, push_opposite_anchor: Bool): Void;
    public function set_anchor_and_margin(margin: Int, anchor: Float, offset: Float, push_opposite_anchor: Bool): Void;
    public function set_anchors_and_margins_preset(preset: Int, resize_mode: Int, margin: Int): Void;
    public function set_anchors_preset(preset: Int, keep_margins: Bool): Void;
    public function set_begin(position: GdVector2): Void;
    public function set_drag_forwarding(target: Control): Void;
    public function set_drag_preview(control: Control): Void;
    public function set_end(position: GdVector2): Void;
    public function set_focus_neighbour(margin: Int, neighbour: NodePath): Void;
    public function set_global_position(position: GdVector2, keep_margins: Bool): Void;
    public function set_margin(margin: Int, offset: Float): Void;
    public function set_margins_preset(preset: Int, resize_mode: Int, margin: Int): Void;
    public function set_position(position: GdVector2, keep_margins: Bool): Void;
    public function set_rotation(radians: Float): Void;
    public function set_size(size: GdVector2, keep_margins: Bool): Void;
    public function show_modal(exclusive: Bool): Void;
    public function warp_mouse(to_position: GdVector2): Void;
    @:native("__new")
    public function new();
}
