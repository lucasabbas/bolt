package lucidkit.godot;

@:native("godot.Image")
extern class Image extends Resource {
    public var data: Map<Dynamic, Dynamic>;
    public function blend_rect(src: Image, src_rect: Rect2, dst: GdVector2): Void;
    public function blend_rect_mask(src: Image, mask: Image, src_rect: Rect2, dst: GdVector2): Void;
    public function blit_rect(src: Image, src_rect: Rect2, dst: GdVector2): Void;
    public function blit_rect_mask(src: Image, mask: Image, src_rect: Rect2, dst: GdVector2): Void;
    public function bumpmap_to_normalmap(bump_scale: Float): Void;
    public function clear_mipmaps(): Void;
    public function compress(mode: Int, source: Int, lossy_quality: Float): Int;
    public function convert(format: Int): Void;
    public function copy_from(src: Image): Void;
    public function create(width: Int, height: Int, use_mipmaps: Bool, format: Int): Void;
    public function create_from_data(width: Int, height: Int, use_mipmaps: Bool, format: Int, data: PoolByteArray): Void;
    public function crop(width: Int, height: Int): Void;
    public function decompress(): Int;
    public function detect_alpha(): Int;
    public function expand_x2_hq2x(): Void;
    public function fill(color: Color): Void;
    public function fill_rect(rect: Rect2, color: Color): Void;
    public function fix_alpha_edges(): Void;
    public function flip_x(): Void;
    public function flip_y(): Void;
    public function generate_mipmaps(renormalize: Bool): Int;
    public function get_data(): PoolByteArray;
    public function get_format(): Int;
    public function get_height(): Int;
    public function get_mipmap_offset(mipmap: Int): Int;
    public function get_pixel(x: Int, y: Int): Color;
    public function get_pixelv(src: GdVector2): Color;
    public function get_rect(rect: Rect2): Image;
    public function get_size(): Vector2;
    public function get_used_rect(): Rect2;
    public function get_width(): Int;
    public function has_mipmaps(): Bool;
    public function is_compressed(): Bool;
    public function is_empty(): Bool;
    public function is_invisible(): Bool;
    public function load(path: String): Int;
    public function load_bmp_from_buffer(buffer: PoolByteArray): Int;
    public function load_jpg_from_buffer(buffer: PoolByteArray): Int;
    public function load_png_from_buffer(buffer: PoolByteArray): Int;
    public function load_tga_from_buffer(buffer: PoolByteArray): Int;
    public function load_webp_from_buffer(buffer: PoolByteArray): Int;
    public function lock(): Void;
    public function normalmap_to_xy(): Void;
    public function premultiply_alpha(): Void;
    public function resize(width: Int, height: Int, interpolation: Int): Void;
    public function resize_to_po2(square: Bool, interpolation: Int): Void;
    public function rgbe_to_srgb(): Image;
    public function save_exr(path: String, grayscale: Bool): Int;
    public function save_png(path: String): Int;
    public function save_png_to_buffer(): PoolByteArray;
    public function set_pixel(x: Int, y: Int, color: Color): Void;
    public function set_pixelv(dst: GdVector2, color: Color): Void;
    public function shrink_x2(): Void;
    public function srgb_to_linear(): Void;
    public function unlock(): Void;
}
